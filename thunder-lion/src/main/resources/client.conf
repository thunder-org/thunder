akka {
    loglevel = "INFO"
    stdout-loglevel = "INFO"

    log-dead-letters = 0
    log-dead-letters-during-shutdown = off

    actor.provider = "akka.remote.RemoteActorRefProvider"

    remote {
        maximum-payload-bytes = 30000000 bytes
        artery {
            enabled = on
            transport = aeron-udp
            canonical.hostname = "127.0.0.1"
            canonical.port = 39810
            advanced {
                # Maximum serialized message size, including header data.
                maximum-frame-size = 256 MiB
            }
        }
    }

    # Settings for the ClusterClient
    cluster.client {
        # Actor paths of the ClusterReceptionist actors on the servers (cluster nodes)
        # that the client will try to contact initially. It is mandatory to specify
        # at least one initial contact.
        # Comma separated full actor paths defined by a string on the form of
        # "akka.tcp://system@hostname:port/system/receptionist"
        initial-contacts = ["akka://ThunderLion-Cluster@127.0.0.1:39811/system/receptionist"]

        # Interval at which the client retries to establish contact with one of
        # ClusterReceptionist on the servers (cluster nodes)
        establishing-get-contacts-interval = 3s

        # Interval at which the client will ask the ClusterReceptionist for
        # new contact points to be used for next reconnect.
        refresh-contacts-interval = 60s

        # How often failure detection heartbeat messages should be sent
        heartbeat-interval = 2s

        # Number of potentially lost/delayed heartbeats that will be
        # accepted before considering it to be an anomaly.
        # The ClusterClient is using the akka.remote.DeadlineFailureDetector, which
        # will trigger if there are no heartbeats within the duration
        # heartbeat-interval + acceptable-heartbeat-pause, i.e. 15 seconds with
        # the default settings.
        acceptable-heartbeat-pause = 13s

        # If connection to the receptionist is not established the client will buffer
        # this number of messages and deliver them the connection is established.
        # When the buffer is full old messages will be dropped when new messages are sent
        # via the client. Use 0 to disable buffering, i.e. messages will be dropped
        # immediately if the location of the singleton is unknown.
        # Maximum allowed buffer size is 10000.
        buffer-size = 1000

        # If connection to the receiptionist is lost and the client has not been
        # able to acquire a new connection for this long the client will stop itself.
        # This duration makes it possible to watch the cluster client and react on a more permanent
        # loss of connection with the cluster, for example by accessing some kind of
        # service registry for an updated set of initial contacts to start a new cluster client with.
        # If this is not wanted it can be set to "off" to disable the timeout and retry
        # forever.
        reconnect-timeout = off
    }
}
